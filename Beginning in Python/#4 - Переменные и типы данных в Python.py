number = 5 # переменная number, = знак присвоения, 5 это значение переменной (тип данных int)
print(number) #Вывод переменной на экран

number = 7 #новое присвоение переменной number собственного значения
print(number) #Вывод переменной на экран (на сей раз это будет 7)

number = 8
del number #мы удалили переменную при помощи директивы del
#print(number) #результат выдаст ошибку, так как print() обращается к переменной, которой нет

digit = 4.5555 # Переменная в виде числа (тип данных: float, число с точкой)
word = "Result: " #Переменная в виде строки

print(word, digit) # выдает результат digit & word

boolean = True #Булевы значения истинности (Тип данных: bool)
boolean_1 = False #Булевы значения ложности

#print(word + boolean) выдаст ошибку т.к. сложение разных типов данных невозможно
#необходимо приводить к одинаковому типу данных, например:
print(word + str(digit)) #См. результат

num_1 = int(input("Введите первое число: "))
num_2 = int(input("Введите второе число: "))

num_1 += 4 # сокращенные действия += , -= , *= , и т.д.
print(num_1 ** num_2) # num_1 плюс 4 возводится в степень num_2


#Дополнительные сведения от чата GPT
#sales_data = (5000, 6000, 4500, 7000, 8000, 5500, 6200, 7200)
# Разделим данные на два полугодия
#first_half = sales_data[:4]  # Первые четыре элемента при помощи [x:y],
# [start:end:step] — берёт элементы от start (включительно) до end (не включается) с шагом step (по умолчанию 1).
#second_half = sales_data[4:]  # Последние четыре элемента
# range(n) генерирует последовательность чисел от 0 до n-1. Например
# sorted(iterable, key=None, reverse=False) iterable - объекты, key - правило переборки, reverse = от меньшего к большему если True