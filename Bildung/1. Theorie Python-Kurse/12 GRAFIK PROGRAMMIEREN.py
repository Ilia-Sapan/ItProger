# 12.1 Bilder auf Schaltflächen und Labels
from tkinter import PhotoImage

# bild = PhotoImage(file = pfad)
# label = Label(master = fenster, image = bild)

# Вот список опций для работы с изображениями в Tkinter с краткими пояснениями:
#
# image – Устанавливает изображение для виджета, например, кнопки или метки.
# PhotoImage – Класс для загрузки и отображения изображений в формате .gif, .pgm, .ppm.
# config() – Метод для изменения изображения на уже существующем виджете.
# compound – Опция для комбинирования текста и изображения в кнопке или метке.
# bitmap – Устанавливает пиктограмму (маленькое изображение) для кнопки или метки.
# activeimage – Опция для установки изображения для кнопки при ее активации (например, при наведении).

# get(x, y): Возвращает цвет пикселя в позиции (x, y) изображения. Цвет возвращается в виде кортежа, содержащего три целых числа (RGB), которые представляют красный, зеленый и синий компоненты цвета.
# height(): Возвращает высоту изображения в пикселях как целое число.
# put(farbe, position): Метод для изменения цвета пикселя на изображении.
# Первый аргумент farbe указывает на цвет в формате строки, например #rrggbb.
# Второй аргумент position указывает на положение пикселя, которое можно указать как (x, y) для одного пикселя или как (x1, y1, x2, y2) для прямоугольной области.
# width(): Возвращает ширину изображения в пикселях как целое число.
# write(pfad): Сохраняет изображение в указанном пути pfad.



# 12.2 Canvas

# create_line(x1, y1, x2, y2, **options) — Рисует линию между точками (x1, y1) и (x2, y2). Параметры **options позволяют изменять цвет, толщину линии и другие свойства.
#
# create_rectangle(x1, y1, x2, y2, **options) — Рисует прямоугольник, заданный координатами противоположных углов: верхний левый угол (x1, y1) и нижний правый угол (x2, y2).
#
# create_oval(x1, y1, x2, y2, **options) — Рисует эллипс, вписанный в прямоугольник с углами (x1, y1) и (x2, y2).
#
# create_text(x, y, text, **options) — Добавляет текст на канвас в точке (x, y). Вы можете указать шрифт, цвет и другие параметры текста.
#
# create_image(x, y, image, **options) — Вставляет изображение на канвас в точке (x, y). Требуется объект PhotoImage для изображения.
#
# create_polygon(x1, y1, x2, y2, ..., **options) — Рисует многоугольник, соединяя указанные точки (x1, y1), (x2, y2), .... Параметры **options позволяют настроить цвет и другие свойства.
#
# delete(tag_or_id) — Удаляет объект по идентификатору или тегу. Если передан тег, удаляются все объекты с этим тегом.
#
# move(tag_or_id, dx, dy) — Перемещает объект с идентификатором или тегом на dx пикселей по оси X и на dy пикселей по оси Y.
#
# tag_bind(tag, sequence, func) — Привязывает событие (например, клик мыши) к объекту с указанным тегом. Например, можно назначить обработчик клика для всех объектов с одним тегом.
#
# bbox(tag_or_id) — Возвращает координаты ограничивающего прямоугольника для объекта с указанным идентификатором или тегом. Это полезно для вычисления размеров объекта.








# Импортируем все необходимые компоненты из библиотеки Tkinter и модуль random для случайных чисел
from tkinter import *
from random import randint

# Функция для имитации броска кубика
def würfeln():
    global summe  # Используем глобальную переменную summe для отслеживания суммы
    text = label.cget('text')  # Получаем текущий текст метки
    zahl = randint(1, 6)  # Генерируем случайное число от 1 до 6, имитируя бросок кубика
    summe += zahl  # Добавляем результат броска к общей сумме
    label.config(text=text + ' ' + str(zahl))  # Обновляем текст на метке, добавляя результат броска
    if summe > 21:  # Если сумма больше 21, меняем цвет фона метки на желтый
        label.config(bg='yellow')

# Функция для сброса суммы и очистки текста
def löschen():
    global summe  # Используем глобальную переменную summe
    summe = 0  # Сбрасываем сумму на 0
    label.config(text='', bg='white')  # Очищаем текст метки и восстанавливаем белый фон

# Инициализируем переменную summe
summe = 0

# Создаем главное окно
fenster = Tk()

# Загружаем изображения для кнопок
bild_würfel = PhotoImage(file='wuerfel_logo.png')  # Картинка для кнопки "Würfeln"
bild_löschen = PhotoImage(file='loeschen_logo.png')  # Картинка для кнопки "Löschen"

# Создаем метку для отображения текста
label = Label(master=fenster, width=16,
              font=('Arial', 30), text='', bg='white')  # Метка для отображения текста и фона
# Создаем кнопки с изображениями
b_würfeln = Button(master=fenster, image=bild_würfel,
                   command=würfeln)  # Кнопка для броска кубика
b_löschen = Button(master=fenster, image=bild_löschen,
                   command=löschen)  # Кнопка для сброса

# Размещаем виджеты в окне
label.pack()  # Размещение метки
b_würfeln.pack(side=LEFT, padx=30, pady=10)  # Размещение кнопки "Würfeln" с отступами
b_löschen.pack(side=RIGHT, padx=30, pady=10)  # Размещение кнопки "Löschen" с отступами

# Запуск главного цикла Tkinter, чтобы приложение работало
fenster.mainloop()

# 12.4 Die Python Imaging Library (PIL)

