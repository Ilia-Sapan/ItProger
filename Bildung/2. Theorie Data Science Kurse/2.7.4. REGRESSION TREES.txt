# 1. –ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è?
# –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
# –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
# 2. –ö–∞–∫ —Å—Ç—Ä–æ–∏—Ç—Å—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ?
# –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Ö–æ–∂ –Ω–∞ –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–æ –≤–º–µ—Å—Ç–æ Gini impurity –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (MSE).
# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É (MSE).
#
# üìå –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
# üìå –û–Ω–æ –∏—â–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Ä–∞–∑–±–∏–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.
# üìå –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–±–∏–µ–Ω–∏–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑, –Ω–æ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî –º–æ–∂–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å—ë –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ).

# import pandas as pd
# from sklearn.tree import DecisionTreeRegressor
#
# # –î–∞–Ω–Ω—ã–µ: –ø–ª–æ—â–∞–¥—å (X) –∏ —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã (y)
# data = {
#     "–ü–ª–æ—â–∞–¥—å": [20, 35, 50, 65, 80, 95, 110],
#     "–¶–µ–Ω–∞": [500, 700, 1200, 1300, 1600, 1800, 2200]
# }
#
# df = pd.DataFrame(data)
#
# # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
# model = DecisionTreeRegressor()
#
# # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
# X = df[['–ü–ª–æ—â–∞–¥—å']]  # –ü—Ä–∏–∑–Ω–∞–∫ (—Ç–∞–±–ª–∏—Ü–∞)
# y = df['–¶–µ–Ω–∞']  # –¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü
# model.fit(X, y)
#
# # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –º¬≤)
# predicted_price = model.predict([[60]])
# print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã:", predicted_price[0])
#
# from sklearn.tree import DecisionTreeClassifier
#
# # –î–∞–Ω–Ω—ã–µ: –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –∫–ª–∞—Å—Å (–±–æ–≥–∞—Ç—ã–π / –±–µ–¥–Ω—ã–π)
# data = {
#     "–ó–∞—Ä–ø–ª–∞—Ç–∞": [2000, 3000, 5000, 8000, 12000, 20000, 30000],
#     "–ö–ª–∞—Å—Å": ["–ë–µ–¥–Ω—ã–π", "–ë–µ–¥–Ω—ã–π", "–ë–µ–¥–Ω—ã–π", "–ë–µ–¥–Ω—ã–π", "–ë–æ–≥–∞—Ç—ã–π", "–ë–æ–≥–∞—Ç—ã–π", "–ë–æ–≥–∞—Ç—ã–π"]
# }
#
# df = pd.DataFrame(data)
#
# # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
# model = DecisionTreeClassifier()
#
# # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
# X = df[['–ó–∞—Ä–ø–ª–∞—Ç–∞']]
# y = df['–ö–ª–∞—Å—Å']
# model.fit(X, y)
#
# # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—á–µ–ª–æ–≤–µ–∫ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π 7000‚Ç¨)
# predicted_class = model.predict([[7000]])
# print("–ö –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —á–µ–ª–æ–≤–µ–∫ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π 7000‚Ç¨:", predicted_class[0])

import pandas as pd
import sklearn
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt

# Einlesen der Daten / –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ

df = pd.read_csv(r"C:\Users\isapa\Desktop\hiring_data.csv")
# print(df.to_string())
# print(df['Uni'].unique())

# Vorbereiten der Daten
d = {'Oxford': 0, 'Harvard': 1, 'ETH': 2}
df['Uni'] = df['Uni'].map(d)

d = {'YES': 1, 'NO': 0}
df['Hire'] = df['Hire'].map(d)
print(df.to_string())

# Trennung der Feature Spalten von der target-Spalte

features = ['Age', 'Experience', 'Rank', 'Uni']
X = df[features]
y = df['Hire']

# Jetzt kommt der eigentliche Decision Tree Klassifizierer

dtree = DecisionTreeClassifier()
dtree.fit(X,y)

tree.plot_tree(dtree, feature_names=features)

plt.show()

# 2.8. Bagging und Boosting

üìå 2.8. Bagging & Boosting ‚Äì –∫–æ–Ω—Å–ø–µ–∫—Ç
1. –ß—Ç–æ —Ç–∞–∫–æ–µ Bagging –∏ Boosting?
–≠—Ç–æ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π (–æ–±—ã—á–Ω–æ –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π), —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.

üîπ Bagging (Bootstrap Aggregating)
–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:

–°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π (–æ–±—ã—á–Ω–æ –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π).
–¢—Ä–µ–Ω–∏—Ä—É–µ–º –∏—Ö –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö (—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º).
–û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (–æ–±—ã—á–Ω–æ —É—Å—Ä–µ–¥–Ω—è–µ–º).
–ü—Ä–∏–º–µ—Ä:

Random Forest ‚Äì —Å–∞–º—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Bagging.
–ü–ª—é—Å—ã:
‚úÖ –°–Ω–∏–∂–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (overfitting).
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö.

–ú–∏–Ω—É—Å—ã:
‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ, –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–µ.

üîπ Boosting
–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:

–°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–∞–±—ã—Ö –º–æ–¥–µ–ª–µ–π (–æ–±—ã—á–Ω–æ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π).
–ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.
–ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω—É.
–ü—Ä–∏–º–µ—Ä:

AdaBoost (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥).
Gradient Boosting (XGBoost, LightGBM, CatBoost) ‚Äì —Å–∞–º—ã–µ –º–æ—â–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
–ü–ª—é—Å—ã:
‚úÖ –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
‚úÖ –î–∞—ë—Ç –æ—á–µ–Ω—å –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å.

–ú–∏–Ω—É—Å—ã:
‚ö†Ô∏è –î–æ–ª—å—à–µ –æ–±—É—á–∞–µ—Ç—Å—è.
‚ö†Ô∏è –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ.

–í—ã–≤–æ–¥
Bagging —Ö–æ—Ä–æ—à, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è (Random Forest).
Boosting —Ö–æ—Ä–æ—à, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–∞—ë—Ç —Å–ª–∞–±—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (XGBoost, LightGBM).
üìå –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω—ã–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π Boosting.
üìå –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —à—É–º–Ω—ã–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π Bagging.

–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å (Random Forest) ‚Äì –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å (Random Forest) ‚Äì —ç—Ç–æ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏.

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

–°–æ–∑–¥–∞—ë—Ç—Å—è –º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π.
–ö–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö.
–î–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:
–í –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî –¥–µ—Ä–µ–≤—å—è –≥–æ–ª–æ—Å—É—é—Ç, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –æ—Ç–≤–µ—Ç.
–í —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ‚Äî –±–µ—Ä—ë—Ç—Å—è —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–µ—Ä–µ–≤—å–µ–≤.
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: Random Forest —É–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–¥–Ω–∏–º –¥–µ—Ä–µ–≤–æ–º —Ä–µ—à–µ–Ω–∏–π.

–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Random Forest
–í scikit-learn –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å:

1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)
üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç?

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤ –±—É–¥–µ—Ç –≤ –ª–µ—Å—É.
–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤, —Ç–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –Ω–æ –¥–æ–ª—å—à–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
üìå –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?

–ó–Ω–∞—á–µ–Ω–∏–µ 100‚Äì500 ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.
–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –º–µ–Ω—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤.
2. –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤ (max_depth)
üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç?

–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–æ –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏ –∫–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ.
–ï—Å–ª–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å, –¥–µ—Ä–µ–≤—å—è –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å—Å—è.
üìå –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?

–î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Üí 3-10 —É—Ä–æ–≤–Ω–µ–π.
–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å None (–≥–ª—É–±–∏–Ω–∞ –±—É–¥–µ—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è).
3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (max_features)
üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç?

–°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–µ—Ä—ë—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
–ï—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ—á—Ç–∏ –æ–±—ã—á–Ω—ã–π Bagging.
üìå –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?

sqrt (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Üí –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
log2 ‚Üí –µ—â—ë —Å–∏–ª—å–Ω–µ–µ —É–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.
None ‚Üí –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–º–æ–∂–µ—Ç –¥–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ).
4. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–∏—Å—Ç–µ (min_samples_leaf)
üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç?

–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–æ–Ω–µ—á–Ω–æ–º —É–∑–ª–µ (–ª–∏—Å—Ç–µ).
–ï—Å–ª–∏ —Å—Ç–∞–≤–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–µ—Ä–µ–≤–æ –±—É–¥–µ—Ç –≥–ª—É–±–∂–µ (—Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è).
üìå –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?

1 ‚Äì –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä–∞–∑–¥–µ–ª—è–µ—Ç —É–∑–ª—ã –¥–æ –ø—Ä–µ–¥–µ–ª–∞).
5-10 ‚Äì –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.
5. –ö—Ä–∏—Ç–µ—Ä–∏–π —Ä–∞–∑–±–∏–µ–Ω–∏—è (criterion)
üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç?

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –≤ —É–∑–ª–∞—Ö –¥–µ—Ä–µ–≤–∞.
–í–∞—Ä–∏–∞–Ω—Ç—ã:
gini (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ‚Äì –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—á–µ–º –Ω–∏–∂–µ, —Ç–µ–º "—á–∏—â–µ" —Ä–∞–∑–±–∏–µ–Ω–∏–µ).
entropy ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
squared_error ‚Äì –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏).
üìå –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å?

gini –∏–ª–∏ entropy ‚Üí –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
squared_error ‚Üí –µ—Å–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—è.
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Python
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from sklearn.ensemble import RandomForestClassifier

# –°–æ–∑–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –∏–∑ 100 –¥–µ—Ä–µ–≤—å–µ–≤
model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
model.fit(X_train, y_train)

# –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_pred = model.predict(X_test)
–í—ã–≤–æ–¥
‚úÖ Random Forest ‚Äì —ç—Ç–æ –∞–Ω—Å–∞–º–±–ª—å –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∏–∂–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.
‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤, –≥–ª—É–±–∏–Ω–∞, –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫—Ä–∏—Ç–µ—Ä–∏–π —Ä–∞–∑–±–∏–µ–Ω–∏—è.
‚úÖ –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã.










